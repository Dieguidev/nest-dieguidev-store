// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  password String
  role     String
  isActive Boolean @default(true)

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Orders    Orders[]

  @@index([isActive])
}

model Customer {
  id       String @id @default(uuid())
  name     String
  lastName String @map("last_name")
  phone    String
  User     User?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String  @id @default(uuid())
  name        String  @unique
  description String
  price       Decimal @db.Decimal(10, 2)
  stock       Int
  image       String
  isActive    Boolean @default(true)

  brand   Brand  @relation(fields: [brandId], references: [id])
  brandId String

  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  categories ProductCategory[]

  @@index([isActive])
}

model Brand {
  id    String @id @default(uuid())
  name  String @unique
  image String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products ProductCategory[]
}

model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([productId, categoryId])
}

model Orders {
  id   String   @id @default(uuid())
  date DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]
}

model OrderItem {
  id        String @id @default(uuid())
  productId String
  quantity  Int
  price     Float

  Order   Orders? @relation(fields: [orderId], references: [id])
  orderId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
